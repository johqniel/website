{"ast":null,"code":"var _jsxFileName = \"/Users/nielo/Desktop/website/src/components/TerminalWindow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Terminal.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// --- Helper: A function for the typing interval ---\n// We put this outside the component so it doesn't reinvoke\nconst typeText = (fullText, setText, speed, onComplete) => {\n  let i = 0;\n  const intervalId = setInterval(() => {\n    if (i >= fullText.length) {\n      clearInterval(intervalId);\n      onComplete(); // We're done, call the next function\n    } else {\n      setText(fullText.substring(0, i + 1));\n      i++;\n    }\n  }, speed);\n  return intervalId; // Return the ID so we can clear it\n};\n\n// --- Helper: Formats the percentage ---\nconst formatPercent = score => {\n  return (score * 100).toFixed(1) + '%';\n};\nconst TerminalWindow = ({\n  analysis\n}) => {\n  _s();\n  // --- 1. Internal state for the text we are *currently* showing ---\n  const [summary, setSummary] = useState('');\n  const [pred1Label, setPred1Label] = useState('');\n  const [pred1, setPred1] = useState('');\n  const [pred2Label, setPred2Label] = useState('');\n  const [pred2, setPred2] = useState('');\n  const terminalEndRef = useRef(null);\n  const typingSpeed = 25; // Typing speed in ms (lower is faster)\n\n  // --- 2. This effect triggers when 'analysis' changes ---\n  useEffect(() => {\n    // A list of all timers we create\n    const timers = [];\n\n    // Clear all text when new analysis arrives\n    setSummary('');\n    setPred1Label('');\n    setPred1('');\n    setPred2Label('');\n    setPred2('');\n    if (analysis) {\n      // --- Build the full text strings ---\n      const fullSummary = analysis.summary;\n      const fullPred1Label = '> PREDICTIONS:';\n      const fullPred1 = analysis.predictions[0] ? `  most likely: probably: ${analysis.predictions[0].label} (${formatPercent(analysis.predictions[0].score)})` : '';\n      const fullPred2Label = ''; // We don't need a label for the 2nd one\n      const fullPred2 = analysis.predictions[1] ? `  second most likely: potentially: ${analysis.predictions[1].label} (${formatPercent(analysis.predictions[1].score)})` : '';\n\n      // --- 3. Start the typing cascade ---\n      // We nest the `typeText` calls in the `onComplete` callback\n      // This ensures they run one after another.\n      const t1 = setTimeout(() => {\n        timers.push(typeText(fullSummary, setSummary, typingSpeed, () => {\n          timers.push(typeText(fullPred1Label, setPred1Label, typingSpeed, () => {\n            timers.push(typeText(fullPred1, setPred1, typingSpeed, () => {\n              timers.push(typeText(fullPred2Label, setPred2Label, typingSpeed, () => {\n                timers.push(typeText(fullPred2, setPred2, typingSpeed, () => {}));\n              }));\n            }));\n          }));\n        }));\n      }, 300); // Start after a short delay\n      timers.push(t1);\n    }\n\n    // --- 4. Cleanup ---\n    // This is critical. If 'analysis' changes mid-type,\n    // we clear all old timers to stop the old effect.\n    return () => {\n      timers.forEach(clearInterval);\n    };\n  }, [analysis]); // The effect re-runs when 'analysis' changes\n\n  // Auto-scroll to the bottom\n  useEffect(() => {\n    var _terminalEndRef$curre;\n    (_terminalEndRef$curre = terminalEndRef.current) === null || _terminalEndRef$curre === void 0 ? void 0 : _terminalEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-dot red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-dot yellow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-dot green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"analysis_feed.log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-body\",\n      children: [!analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-prompt\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-text\",\n          children: \"Analysis pending...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), summary && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal-line\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-prompt\",\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-text terminal-label\",\n            children: \"SUMMARY:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"terminal-line\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-prompt\",\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-text\",\n            children: summary\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), pred1Label && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-prompt\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-text terminal-label\",\n          children: pred1Label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), pred1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-prompt\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-text\",\n          children: pred1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), pred2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-prompt\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-text\",\n          children: pred2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-line\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-prompt\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"terminal-cursor\",\n          children: \"_\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: terminalEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(TerminalWindow, \"CG5y6cIkP9giiYvixZSg7Q2kjlo=\");\n_c = TerminalWindow;\nexport default TerminalWindow;\nvar _c;\n$RefreshReg$(_c, \"TerminalWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","typeText","fullText","setText","speed","onComplete","i","intervalId","setInterval","length","clearInterval","substring","formatPercent","score","toFixed","TerminalWindow","analysis","_s","summary","setSummary","pred1Label","setPred1Label","pred1","setPred1","pred2Label","setPred2Label","pred2","setPred2","terminalEndRef","typingSpeed","timers","fullSummary","fullPred1Label","fullPred1","predictions","label","fullPred2Label","fullPred2","t1","setTimeout","push","forEach","_terminalEndRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/nielo/Desktop/website/src/components/TerminalWindow.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AnalysisResult } from '../types';\nimport '../styles/Terminal.css';\n\ninterface TerminalWindowProps {\n  analysis: AnalysisResult | null;\n}\n\n// --- Helper: A function for the typing interval ---\n// We put this outside the component so it doesn't reinvoke\nconst typeText = (\n  fullText: string,\n  setText: React.Dispatch<React.SetStateAction<string>>,\n  speed: number,\n  onComplete: () => void // A callback to start the next step\n) => {\n  let i = 0;\n  const intervalId = setInterval(() => {\n    if (i >= fullText.length) {\n      clearInterval(intervalId);\n      onComplete(); // We're done, call the next function\n    } else {\n      setText(fullText.substring(0, i + 1));\n      i++;\n    }\n  }, speed);\n  \n  return intervalId; // Return the ID so we can clear it\n};\n\n// --- Helper: Formats the percentage ---\nconst formatPercent = (score: number) => {\n  return (score * 100).toFixed(1) + '%';\n};\n\n\nconst TerminalWindow: React.FC<TerminalWindowProps> = ({ analysis }) => {\n  // --- 1. Internal state for the text we are *currently* showing ---\n  const [summary, setSummary] = useState('');\n  const [pred1Label, setPred1Label] = useState('');\n  const [pred1, setPred1] = useState('');\n  const [pred2Label, setPred2Label] = useState('');\n  const [pred2, setPred2] = useState('');\n\n  const terminalEndRef = useRef<HTMLDivElement>(null);\n  const typingSpeed = 25; // Typing speed in ms (lower is faster)\n\n  // --- 2. This effect triggers when 'analysis' changes ---\n  useEffect(() => {\n    // A list of all timers we create\n    const timers: NodeJS.Timeout[] = [];\n    \n    // Clear all text when new analysis arrives\n    setSummary('');\n    setPred1Label('');\n    setPred1('');\n    setPred2Label('');\n    setPred2('');\n\n    if (analysis) {\n      // --- Build the full text strings ---\n      const fullSummary = analysis.summary;\n      const fullPred1Label = '> PREDICTIONS:';\n      const fullPred1 = analysis.predictions[0]\n        ? `  most likely: probably: ${analysis.predictions[0].label} (${formatPercent(analysis.predictions[0].score)})`\n        : '';\n      const fullPred2Label = ''; // We don't need a label for the 2nd one\n      const fullPred2 = analysis.predictions[1]\n        ? `  second most likely: potentially: ${analysis.predictions[1].label} (${formatPercent(analysis.predictions[1].score)})`\n        : '';\n\n      // --- 3. Start the typing cascade ---\n      // We nest the `typeText` calls in the `onComplete` callback\n      // This ensures they run one after another.\n      const t1 = setTimeout(() => {\n        timers.push(\n          typeText(fullSummary, setSummary, typingSpeed, () => {\n            timers.push(\n              typeText(fullPred1Label, setPred1Label, typingSpeed, () => {\n                timers.push(\n                  typeText(fullPred1, setPred1, typingSpeed, () => {\n                    timers.push(\n                      typeText(fullPred2Label, setPred2Label, typingSpeed, () => {\n                        timers.push(\n                          typeText(fullPred2, setPred2, typingSpeed, () => {})\n                        );\n                      })\n                    );\n                  })\n                );\n              })\n            );\n          })\n        );\n      }, 300); // Start after a short delay\n      timers.push(t1);\n    }\n\n    // --- 4. Cleanup ---\n    // This is critical. If 'analysis' changes mid-type,\n    // we clear all old timers to stop the old effect.\n    return () => {\n      timers.forEach(clearInterval);\n    };\n  }, [analysis]); // The effect re-runs when 'analysis' changes\n\n  // Auto-scroll to the bottom\n  useEffect(() => {\n    terminalEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  });\n\n  return (\n    <div className=\"terminal-container\">\n      <div className=\"terminal-header\">\n        <div className=\"terminal-buttons\">\n          <span className=\"terminal-dot red\"></span>\n          <span className=\"terminal-dot yellow\"></span>\n          <span className=\"terminal-dot green\"></span>\n        </div>\n        <span>analysis_feed.log</span>\n      </div>\n\n      <div className=\"terminal-body\">\n        {/* Placeholder */}\n        {!analysis && (\n          <div className=\"terminal-line\">\n            <span className=\"terminal-prompt\">&gt;</span>\n            <span className=\"terminal-text\">\n              Analysis pending...\n            </span>\n          </div>\n        )}\n\n        {/* --- 5. Render the *internal state* text --- */}\n        {summary && (\n          <>\n            <div className=\"terminal-line\">\n              <span className=\"terminal-prompt\">&gt;</span>\n              <span className=\"terminal-text terminal-label\">SUMMARY:</span>\n            </div>\n            <div className=\"terminal-line\">\n              <span className=\"terminal-prompt\"> </span>\n              <span className=\"terminal-text\">{summary}</span>\n            </div>\n          </>\n        )}\n        \n        {pred1Label && (\n          <div className=\"terminal-line\">\n            <span className=\"terminal-prompt\">&gt;</span>\n            <span className=\"terminal-text terminal-label\">{pred1Label}</span>\n          </div>\n        )}\n\n        {pred1 && (\n          <div className=\"terminal-line\">\n            <span className=\"terminal-prompt\"> </span>\n            <span className=\"terminal-text\">{pred1}</span>\n          </div>\n        )}\n        \n        {pred2 && (\n          <div className=\"terminal-line\">\n            <span className=\"terminal-prompt\"> </span>\n            <span className=\"terminal-text\">{pred2}</span>\n          </div>\n        )}\n\n        {/* Blinking cursor appears only when analysis is done */}\n        {analysis && (\n          <div className=\"terminal-line\">\n            <span className=\"terminal-prompt\">&gt;</span>\n            <span className=\"terminal-cursor\">_</span>\n          </div>\n        )}\n\n        <div ref={terminalEndRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default TerminalWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}